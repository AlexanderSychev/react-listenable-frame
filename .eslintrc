{
  "root": true,
  "extends": [
    "airbnb",
    "plugin:@typescript-eslint/recommended",
    "prettier",
    "prettier/@typescript-eslint",
    "prettier/react"
  ],
  "rules": {
    "@typescript-eslint/no-var-requires": "off",
    "import/no-unresolved": "off",
    // "iframe" props spreading required
    "react/jsx-props-no-spreading": "off",
    "jsx-a11y/iframe-has-title": "off",
    // React is peer dependency, so off this option
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define": ["error", "nofunc"],
    "no-console": ["error", { "allow": ["warn", "error", "info", "groupCollapsed", "groupEnd"] }],
    "capitalized-comments": ["error", "always", { "ignorePattern": "tslint|webpackChunkName" }]
  },
  "overrides": [
    {
      "files": ["**/*.ts", "**/*.tsx"],
      "settings": {
        "import/resolver": {
          "node": {
            "extensions": [".ts", ".tsx", ".d.ts", ".js"]
          },
          "typescript": {}
        },
        "import/ignore": [".scss"]
      },
      "plugins": ["@typescript-eslint", "react-hooks"],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "project": "./tsconfig.json"
      },
      "rules": {
        // Bring back disabled rule
        "@typescript-eslint/no-var-requires": "error",
        // Empty interfaces for Props are convenient
        "@typescript-eslint/no-empty-interface": "off",
        // Unavoidable in some cases
        "@typescript-eslint/no-non-null-assertion": "warn",
        // Useless
        "@typescript-eslint/explicit-function-return-type": "off",
        // https://github.com/eslint/typescript-eslint-parser/issues/437
        "no-undef": "off",
        // Enable React Hooks rules
        "react-hooks/rules-of-hooks": "error",
        "react-hooks/exhaustive-deps": "error",
        // Allow JSX in tsx files
        "react/jsx-filename-extension": ["error", { "extensions": [".tsx"] }],
        // Skip undeclared - no need in ts
        "react/prop-types": [
          "error",
          {
            "ignore": [],
            "customValidators": [],
            "skipUndeclared": true
          }
        ],
        // Function overrides are fine
        "import/export": "warn",
        // Seems fine in some cases
        "react/destructuring-assignment": "warn",
        // TODO: Ensure consistency between member-ordering and sort-comp
        "@typescript-eslint/member-ordering": [
          "error",
          {
            "default": [
              "public-static-field",
              "protected-static-field",
              "private-static-field",
              "public-static-method",
              "protected-static-method",
              "private-static-method",
              "public-instance-field",
              "protected-instance-field",
              "private-instance-field",
              "public-constructor",
              "protected-constructor",
              "private-constructor",
              "public-instance-method",
              "protected-instance-method",
              "private-instance-method"
            ]
          }
        ],
        // Move rendering right after lifecycle
        "react/sort-comp": [
          "error",
          {
            "order": [
              "static-methods",
              "instance-variables",
              "lifecycle",
              "rendering",
              "/^on.+$/",
              "getters",
              "setters",
              "/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/",
              "instance-methods",
              "everything-else"
            ],
            "groups": {
              "lifecycle": [
                "displayName",
                "propTypes",
                "contextTypes",
                "childContextTypes",
                "mixins",
                "statics",
                "defaultProps",
                "constructor",
                "getDefaultProps",
                "getInitialState",
                "state",
                "getChildContext",
                "componentWillMount",
                "componentDidMount",
                "componentWillReceiveProps",
                "shouldComponentUpdate",
                "componentWillUpdate",
                "componentDidUpdate",
                "componentWillUnmount"
              ],
              "rendering": ["/^render.+$/", "render"]
            }
          }
        ],
        "import/extensions": [
          "error",
          "ignorePackages",
          {
            "js": "never",
            "jsx": "never",
            "ts": "never",
            "tsx": "never"
          }
        ]
      }
    }
  ]
}
